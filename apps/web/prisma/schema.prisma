generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  subscriptions Subscription[]
  usage         Usage[]
  apiKeys       ApiKey[]
  pats          Pat[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  keyHash   String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id             String    @id @default(cuid())
  userId         String
  name           String
  url            String
  method         String    @default("GET")
  headersEnc     String?
  bodyEnc        String?
  schedule       String    @default("15m")
  expectStatus   Int       @default(200)
  expectJsonPath String?
  expectValue    String?
  paused         Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  runs           JobRun[]
}

model JobRun {
  id         String   @id @default(cuid())
  jobId      String
  startedAt  DateTime @default(now())
  durationMs Int
  statusCode Int
  ok         Boolean
  errorMsg   String?
  sampleBody String?
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String
  status           String
  priceId          String
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Usage {
  id          String   @id @default(cuid())
  userId      String
  count       Int      @default(0)
  periodStart DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, periodStart])
}

model Pat {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
